module.exports = {
  AUTH: {
    LOGIN: {
      EMPTY_CREDENTIALS: "Username or password is empty!",
      USER_NOT_FOUND: "User does not exist!",
      INVALID_CREDENTIALS: "Username or password is incorrect!",
    },
    CREATE_USER: {
      EMPTY_CREDENTIALS: "Username or password is empty!",
      USER_CONFLICT: "User already exist!",
      CREATE_USER_SUCCESS: "Create user successful!",
    },
    VERIFY_TOKEN: {
      EMPTY_TOKEN: "Token is empty or invalid!",
      TOKEN_EXPIRED: "Token is expired!",
    },
    CHANGE_PASSWORD: {
      EMPTY_CREDENTIALS: "Username or new password is empty!",
      USER_NOT_FOUND: "User does not exist!",
      UNAUTHORIZED: "you are not authorized to change password for this user",
    },
    LOG_OUT: {
      LOG_OUT_SUCCESS: "User logout successful!",
      LOG_OUT_ERROR: "Session does not exist!",
    },
  },
  REPORTING: {
    MISSING_PARAMS: 'ProjectId and date are required',
    GET_MISTAKE_REPORT_SUCCESS: 'Get mistake report success',
    GET_QC_EFFORT_SUCCESS: 'Get QC effort success',
    CREATE_MISTAKE_REPORT_SUCCESS: 'Create mistake reports success',
    CREATE_QC_EFFORT_SUCCESS: 'Create QC efforts success',
    GET_PROJECT_QUALITY_STATS_SUCCESS: 'Get project quality statistics success',
    GET_ALL_PROJECTS_QUALITY_STATS_SUCCESS: 'Get all projects quality statistics success',
    UPDATE_ERROR_TYPE_SUCCESS: 'Update error type success',
    BATCH_UPDATE_ERROR_TYPE_SUCCESS: 'Batch update error types success',
    BATCH_APPROVE_REJECT_SUCCESS: 'Batch approve/reject mistakes success',
    APPROVE_MISTAKE_SUCCESS: 'Approve mistake success',
    REJECT_MISTAKE_SUCCESS: 'Reject mistake success',
    GET_FIELD_CONFIGURATION_SUCCESS: 'Get field configuration success',
    UPDATE_FIELD_CONFIGURATION_SUCCESS: 'Update field configuration success',
    MISSING_PROJECT_ID: 'ProjectId is required',
    MISSING_FIELD_UPDATE_DATA: 'Fields data for update is required',
    NOT_FOUND: 'Record not found',
    INTERNAL_SERVER_ERROR: 'Internal server error',
    INVALID_STATUS_FOR_OPERATION: 'Invalid status for this operation',
    RECORD_MODIFIED_BY_ANOTHER_USER: 'Record may have been modified by another user',
    OPTIMISTIC_LOCK_FAILED: 'Update failed due to concurrent modification'
  },
  DATA_IMPORT: {
    MISSING_PARAMS: 'ProjectId, batchId, document, and dataFiltered are required',
    MISTAKE_IMPORT_SUCCESS: 'Import mistake reports successfully',
    QC_EFFORT_IMPORT_SUCCESS: 'Import QC efforts successfully',
    BOTH_IMPORT_SUCCESS: 'Import both mistake reports and QC efforts successfully',
    NO_MISTAKE_FOUND: 'No mistake found to import',
    NO_QC_EFFORT_FOUND: 'No QC effort found to import',
    INTERNAL_SERVER_ERROR: 'Internal server error during data import',
  },
  PROJECT_THRESHOLD: {
    MISSING_PROJECT_ID: 'ProjectId is required',
    MISSING_THRESHOLD_DATA: 'Threshold data is required',
    INVALID_THRESHOLD_PERCENTAGE: 'Threshold percentage must be between 0 and 100',
    INVALID_THRESHOLD_TYPE: 'Threshold type is required and cannot be empty',
    DUPLICATE_THRESHOLD_TYPE: 'Threshold type already exists for this project',
    GET_PROJECT_THRESHOLD_SUCCESS: 'Get project threshold configuration success',
    CREATE_PROJECT_THRESHOLD_SUCCESS: 'Create project threshold configuration success',
    UPDATE_PROJECT_THRESHOLD_SUCCESS: 'Update project threshold configuration success',
    DELETE_PROJECT_THRESHOLD_SUCCESS: 'Delete project threshold configuration success',
    PROJECT_THRESHOLD_NOT_FOUND: 'Project threshold configuration not found',
    INTERNAL_SERVER_ERROR: 'Internal server error',
  },
  APP: {
    GET_ROUTES_CONFIG_SUCCESS: 'Get routes configuration success',
    GET_ROUTES_CONFIG_FAILED: 'Failed to get routes configuration',
    INTERNAL_SERVER_ERROR: 'Internal server error',
  }
};